import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:intl/intl.dart';

class PaperlessODPage extends StatefulWidget {
  @override
  _PaperlessODPageState createState() => _PaperlessODPageState();
}

class _PaperlessODPageState extends State<PaperlessODPage> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final TextEditingController _purposeController = TextEditingController();
  DateTime? _selectedDate;
  String? _selectedTimeSlot;
  String? _userName;

  @override
  void initState() {
    super.initState();
    _fetchUserName();
  }

  void _fetchUserName() async {
    String? userEmail = _auth.currentUser?.email;
    if (userEmail != null) {
      DocumentSnapshot userDoc = await _firestore.collection("users").doc(userEmail).get();
      if (userDoc.exists) {
        setState(() {
          _userName = userDoc["name"];
        });
      }
    }
  }

  void _submitODRequest() async {
    String? userEmail = _auth.currentUser?.email;
    if (userEmail == null || _userName == null || _selectedDate == null || _selectedTimeSlot == null || _purposeController.text.trim().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("All fields are required!")));
      return;
    }

    await _firestore.collection("od_requests").add({
      "name": _userName,
      "email": userEmail,
      "date": DateFormat("yyyy-MM-dd").format(_selectedDate!),
      "time_slot": _selectedTimeSlot,
      "purpose": _purposeController.text.trim(),
      "status": "Pending",
      "timestamp": FieldValue.serverTimestamp(),
    });

    _purposeController.clear();
    setState(() {
      _selectedDate = null;
      _selectedTimeSlot = null;
    });

    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("OD Request Submitted!")));
  }

  String formatDate(Timestamp timestamp) {
    DateTime date = timestamp.toDate();
    return DateFormat("dd MMM yyyy, hh:mm a").format(date);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[100],
      appBar: AppBar(
        title: Text("Paperless OD Request", style: TextStyle(fontWeight: FontWeight.bold)),
        backgroundColor: Colors.grey,
        elevation: 0,
        centerTitle: true,
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildCard(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildSectionTitle("Select Date"),
                  ListTile(
                    leading: Icon(Icons.calendar_today, color: Colors.blue),
                    title: Text(_selectedDate == null ? "Choose Date" : DateFormat("dd MMM yyyy").format(_selectedDate!),
                        style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500)),
                    tileColor: Colors.grey[200],
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                    onTap: () async {
                      DateTime? pickedDate = await showDatePicker(
                        context: context,
                        initialDate: DateTime.now(),
                        firstDate: DateTime.now(),
                        lastDate: DateTime(2030),
                      );
                      if (pickedDate != null) {
                        setState(() {
                          _selectedDate = pickedDate;
                        });
                      }
                    },
                  ),
                  SizedBox(height: 10),
                  _buildSectionTitle("Select Time Slot"),
                  DropdownButtonFormField<String>(
                    value: _selectedTimeSlot,
                    hint: Text("Choose Time Slot"),
                    decoration: _inputDecoration(),
                    items: ["Morning", "Afternoon", "Full Day"].map((slot) {
                      return DropdownMenuItem<String>(
                        value: slot,
                        child: Text(slot),
                      );
                    }).toList(),
                    onChanged: (value) {
                      setState(() {
                        _selectedTimeSlot = value;
                      });
                    },
                  ),
                  SizedBox(height: 10),
                  _buildSectionTitle("Purpose"),
                  TextField(
                    controller: _purposeController,
                    maxLines: 3,
                    decoration: _inputDecoration(),
                  ),
                ],
              ),
            ),
            SizedBox(height: 20),
            Center(
              child: ElevatedButton.icon(
                onPressed: _submitODRequest,
                icon: Icon(Icons.send,color: Colors.white),
                label: Text("Submit OD Request",style: TextStyle(color: Colors.white)),
                style: ElevatedButton.styleFrom(
                  padding: EdgeInsets.symmetric(vertical: 12, horizontal: 24),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                  backgroundColor: Colors.black,
                  elevation: 5,
                ),
              ),
            ),
            SizedBox(height: 20),
            _buildSectionTitle("Previous Requests"),
            StreamBuilder<QuerySnapshot>(
              stream: _firestore.collection("od_requests").orderBy("timestamp", descending: true).snapshots(),
              builder: (context, snapshot) {
                if (!snapshot.hasData) return Center(child: CircularProgressIndicator());
                List<QueryDocumentSnapshot> docs = snapshot.data!.docs;
                if (docs.isEmpty) return Center(child: Text("No OD requests found."));
                return Column(
                  children: docs.map((doc) {
                    var data = doc.data() as Map<String, dynamic>;
                    return _buildCard(
                      child: ListTile(
                        title: Text("Name: ${data["name"]}", style: TextStyle(fontWeight: FontWeight.bold)),
                        subtitle: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text("Email: ${data["email"]}"),
                            Text("Date: ${data["date"]}, ${data["time_slot"]}"),
                            Text("Status: ${data["status"]}",
                                style: TextStyle(fontWeight: FontWeight.bold, color: getStatusColor(data["status"]))),
                            if (data["timestamp"] != null)
                              Text("Requested on: ${formatDate(data["timestamp"])}",
                                  style: TextStyle(fontSize: 12, color: Colors.grey)),
                          ],
                        ),
                      ),
                    );
                  }).toList(),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Text(
        title,
        style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold, color: Colors.blueGrey),
      ),
    );
  }

  Widget _buildCard({required Widget child}) {
    return Card(
      elevation: 5,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      color: const Color.fromARGB(255, 230, 230, 230), // Updated card color
      child: Padding(
        padding: EdgeInsets.all(16),
        child: child,
      ),
    );
  }

  InputDecoration _inputDecoration() {
    return InputDecoration(
      filled: true,
      fillColor: Colors.grey[200],
      border: OutlineInputBorder(borderRadius: BorderRadius.circular(12), borderSide: BorderSide.none),
      contentPadding: EdgeInsets.symmetric(vertical: 12, horizontal: 16),
    );
  }

  Color getStatusColor(String status) {
    switch (status.toLowerCase()) {
      case "approved":
        return Colors.green;
      case "rejected":
        return Colors.red;
      default:
        return Colors.orange;
    }
  }
}
